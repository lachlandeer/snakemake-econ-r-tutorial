[
["index.html", "Reproducible Research Workflows with Snakemake and R Chapter 1 Prerequisites", " Reproducible Research Workflows with Snakemake and R An Extended Tutorial for Economists and Social Scientists Lachlan Deer Julian Langer 2018-08-06 Chapter 1 Prerequisites This is a sample book written in Markdown. You can use anything that Pandoc’s Markdown supports, e.g., a math equation \\(a^2 + b^2 = c^2\\). The bookdown package can be installed from CRAN or Github: "],
["intro.html", "Chapter 2 Motivating &amp; Rationale 2.1 A Case for Reproducibility 2.2 What is Snakemake &amp; Why Should you use it? 2.3 Why R? 2.4 Working Example: Replicating Mankiw, Romer and Weil’s 1992 QJE 2.5 The way forward", " Chapter 2 Motivating &amp; Rationale 2.1 A Case for Reproducibility 2.1.1 How far to go in the quest for reproducibility? 2.2 What is Snakemake &amp; Why Should you use it? 2.3 Why R? 2.4 Working Example: Replicating Mankiw, Romer and Weil’s 1992 QJE Throughout our tutorial we are going to use a running example to illustrate the concepts we discuss. 2.5 The way forward For the purpose of this tutorial we will focus on replicating the following aspects of the MRW paper:1 Regression Tables 1 and 2: Estimating the Textbook- and Augmented Solow Model Figure 1: Unconditional Versus Conditional Convergence To replicate these we will need to proceed as follows: Perform some data management Prepare the data before we run regressions Do some analysis. For example, run regressions for: Different subsets of data Alternative econometric specifications Turn the statistical output of the regressions into a tabular format that we can insert into a document Construct a set of graphs Integrate the tables and graphs into a paper and a set of slides (optional) We hope that these 5 steps look familiar - as they were designed to represent a simplifed workflow for an applied economist or social science researcher. Before proceeding to understanding how to use Snakemake and R to construct a reproducible workflow, the next chapter first takes a deeper dive into the a protypical way to set up a research project on our computer. Exercise: Your own project’s steps Think about a project you are working on or have worked on in the past (it may be a Bachelor or Master’s thesis or a recent / active research project). Does your project fit into the 5 steps we described above? If not, what would you modify or add to our 5 steps? (Do you think this would destroy the general principles we will encourage over the next chapters?) A complete replication using the concepts presented in this tutorial is available here↩ "],
["project-organization.html", "Chapter 3 Project Organization 3.1 Project Structure I: Separating Inputs and Outputs 3.2 Project Structure II: Separating Logical Chunks of the Project 3.3 Project Structure III: Separating Input Parameters from Code", " Chapter 3 Project Organization 3.1 Project Structure I: Separating Inputs and Outputs Structuring our project and the locations of files is an important concept. Let’s look at the structure of our project’s folder. Open a terminal and change into this directory cd YOUR/PATH/TO/snakemake-econ-r-student And list the subdirectories of the main directory ls -d */ We see the following folder structure ./ |- src/ |- out/ |- log/ |- sandbox/ We recommend the following structure for any project: Root Folder src folder for input files out folder for output files a log folder to store computer logs a sandbox folder that gives us a ‘safe place’ to develop new code We discuss each of these in turn. 3.1.1 The Root Folder TBD 3.1.2 The src folder TBD 3.1.3 The out folder TBD 3.1.4 The log folder 3.1.5 Exploring the Full Structure of the MRW Replication Project Now, let’s look at all contents of this main projects directory: ls -F . We see the following folder structure ./ |- src/ |- out/ |- log/ |- sandbox/ | README.md | Snakefile Notice that there are no instances of: (i) scripts, (ii) files containing content of the paper or slides (iii) something else we haven’t thought of yet Instead, there are only two files, a README.md and a file called Snakefile. TODO: explain these two files 3.2 Project Structure II: Separating Logical Chunks of the Project As we have mentioned above, to keep our project’s structure clean, we want to keep all the computer code inside the src directory. Let’s have a look at the content of src. ls -F src/ We see the following output: ./ |src/ |- data/ |- data-management/ |- data-specs/ |- analysis/ |- model-specs/ |- lib/ |- figures/ |- tables/ The type of content we expect in each file is: TBD 3.2.1 Exploring the Structure of the MRW Replication Subdirectories We begin our exploration of the project by looking at the folders that appear to be related to the data. If we look inside the data directory ls -F src/data/ mrw.dta That is, our data/ directory contains the project’s original data set. Note that in more extensive projects, the data/ subfolder would typically have more than one data set. For example: dataset1.dta dataset2.dta dataset3.csv TBD - aside on file endings. Further, your data folder may even contain further subdirectories that organize data further ./ |src/ |- data/ |- data-provider-a/ |- dataset1.csv |- dataset2.csv |- data-provider-b/ |- dataset3.txt |- dataset4.txt If we now turn to the data-management directory, we can explore it’s contents too: ls -F src/data-management/ rename_variables.R gen_reg_vars.R TODO: meaningful filenames Note two different ways to name files Exercise: Exploring the Remaining Subdirectories TBD 3.3 Project Structure III: Separating Input Parameters from Code Next we look at the somewhat mysteriously named data-specs folder. And if we explore the folder’s contents: ls -F src/data-specs/ subset_intermediate.json subset_nonoil.json subset_oecd.json Again, the file names are somewhat meaningful on their own - they appear to be some way of subsetting data (selecting some rows). If we look inside one of these files: cat src/data-specs/subset_oecd.json { &quot;KEEP_CONDITION&quot;: &quot;oecd == 1&quot; } We see an a variable KEEP_CONDITION which is storing a string &quot;oecd == 1&quot;. TBD: Why have we done this? See below. 3.3.1 Exploring Parameter Separation in the MRW Replication Project "],
["initial-steps-with-snakemake.html", "Chapter 4 Initial Steps with Snakemake 4.1 Starting a Research Project 4.2 The Beginning of a Snakefile 4.3 Rule Structure 4.4 Our First Rule", " Chapter 4 Initial Steps with Snakemake 4.1 Starting a Research Project We are now ready to get started working with the code and data to build a fully reproducible pipeline. In Chapter XX we described a simplified research workflow to be: Perform some data management Do some analysis Turn the output of the analysis into a tabular format Construct a set of graphs Integrate the tables and graphs into a paper and a set of slides (optional) We are going to start at the beginning with data management. Recall that we have the following files in our data management subdirectory, src/data-management: rename_variables.R gen_reg_vars.R We will need to run each of these scripts sequentially. First we want to run the script rename_variables.R to tidy up the variable names in our data set. Second, gen_reg_vars.R will create the some additional variables in our data that will be needed to run some regressions in later steps. Over the next few sections we are going to build up 2 rules, one for each file, that will execute these scripts and deliver output. 4.2 The Beginning of a Snakefile We are going to put the collection of rules that build our project into a file. We can then use the Snakemake to execute these rules and build our project. The set of rules we want to construct are going to go into the file called Snakefile - which is the name of a file that Snakemake will look into by default to execite a project. Lets open the file called Snakefile in the project’s main directory. When you open it it should look as follows: # Main Workflow - SOME PROJECT # Contributors: YOUR NAME(S) import glob, os # --- Variable Declarations ---- # runR = &quot;Rscript --no-save --no-restore --verbose&quot; logAll = &quot;2&gt;&amp;1&quot; # --- Main Build Rules --- # ## To be constructed Note that the amount of structure we have here is not totally necessary. However, good structure will make understanding easier later. Let’s go through what we see. The first lines of code are comments, to help us navigate a little and understand what we are looking at. The very first line tells us that this is a project workflow, and then tells us what the particular project is. The second line tells us who contributed to this file. This can be useful so we know who to contact with questions. You should do update the name of the project, and add your name to the list of contributors. For us, the top 2 lines becomes: # Main Workflow - Replicating MRW # Contributors: @lachlandeer, @julianlanger Next, we see the line: import glob, os What we are doing here is loading two additional libraries that will help us later on with some functionality. Essentially, we want some “helper” functions to make the rest of our Snakemake process easier to build. When we get to the point we need them, we will be more explicit. The lines: # --- Variable Declarations ---- # runR = &quot;Rscript --no-save --no-restore --verbose&quot; logAll = &quot;2&gt;&amp;1&quot; are creating some shorthand notation for us. runR will be what we want to use when we need to execute an R script. We declare the shorthand so will not need to always write out the rather long statement we have assigned to the value runR. logAll is a code snippet that will log all the output from code execution and all error messages to one file. This is useful when debugging errors in our code - which we hope won’t happen too often. The exact value here (&quot;2&gt;&amp;1&quot;) is specific to the R language. The next few lines are: # --- Main Build Rules --- # ## To be constructed These are comments. We are using the # --- Something --- # notation to break up the code into logical blocks. It is in this block that we will assemble the rules on which our project will be built. Looking generally at the code, if you have some familarity with the Python programming language you might recognise that this looks quite some form of Python code. You are correct - Snakemake is written using Python, so lots of what we do here will look like Python code. If you are unfamiliar with Python, do not worry - there is nothing here that will prohibit you from going further, and we will explain what is happening as we go. 4.3 Rule Structure A Snakefile is a collection of rules that together define the order in which a project will be executed. In our Snakefile we will start to assemble rules under the # --- Main Build Rules --- # section to keep things tidy. Each rule can be thought of as a recipe that combines different inputs, such as data and and R script together to produce one or more output(s). The key components we are going to use to construct a rule are: a name for the rule, the list of inputs the list of outputs produced a log file, that captures any output that is printed out of R a shell command that tells snakemake how to combine the inputs to produce a outputs. Snakemake expects these components to be provided in a particular way so that it knows what to do with the information you provided. We are going to specify rules in the following format: rule rule_name: input: input_name1 = &quot;PATH/TO/input_one&quot;, input_name2 = &quot;PATH/TO/input_two&quot; output: output_name1 = &quot;PATH/TO/SAVE/output_one&quot;, output_name2 = &quot;PATH/TO/SAVE/output_two&quot; log: txt_file = &quot;PATH/TO/SAVE/LOGFILE/log_file&quot; shell: &quot;HOW TO MIX IT ALL TOGETHER&quot; We can have as many inputs and outputs as we need to have per rule. Each input and each output are given names, for example input_name1 which take the value to the file path and name of the file. It is important to wrap each of these paths into quotations, and to separate each of the multiple inputs and outputs with a comma. 4.4 Our First Rule "],
["automatic-variables.html", "Chapter 5 Automatic Variables", " Chapter 5 Automatic Variables Content is TBD "],
["getting-dependencies-right.html", "Chapter 6 Getting Dependencies Right", " Chapter 6 Getting Dependencies Right Content is TBD "],
["packrat-managing-package-dependencies.html", "Chapter 7 Packrat: Managing Package Dependencies", " Chapter 7 Packrat: Managing Package Dependencies Content is TBD "],
["pattern-rules.html", "Chapter 8 Pattern Rules", " Chapter 8 Pattern Rules Content is TBD "],
["building-the-entire-project.html", "Chapter 9 Building The Entire Project", " Chapter 9 Building The Entire Project Content is TBD "],
["configuration-files-for-tidy-paths.html", "Chapter 10 Configuration Files for Tidy Paths", " Chapter 10 Configuration Files for Tidy Paths Content is TBD "],
["subworkflows-divide-and-conquer.html", "Chapter 11 Subworkflows: Divide and Conquer", " Chapter 11 Subworkflows: Divide and Conquer Content is TBD "],
["building-a-paper-and-slides-with-rmarkdown.html", "Chapter 12 Building a Paper and Slides with Rmarkdown", " Chapter 12 Building a Paper and Slides with Rmarkdown Content is TBD "],
["concluding-thoughts.html", "Chapter 13 Concluding Thoughts", " Chapter 13 Concluding Thoughts Content is TBD "]
]
