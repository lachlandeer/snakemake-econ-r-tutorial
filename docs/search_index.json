[
["index.html", "Reproducible Research Workflows with Snakemake and R Chapter 1 Prerequisites", " Reproducible Research Workflows with Snakemake and R An Extended Tutorial for Economists and Social Scientists Lachlan Deer Julian Langer 2018-08-06 Chapter 1 Prerequisites This is a sample book written in Markdown. You can use anything that Pandoc’s Markdown supports, e.g., a math equation \\(a^2 + b^2 = c^2\\). The bookdown package can be installed from CRAN or Github: "],
["intro.html", "Chapter 2 Motivating &amp; Rationale 2.1 A Case for Reproducibility 2.2 What is Snakemake &amp; Why Should you use it? 2.3 Why R? 2.4 Working Example: Replicating Mankiw, Romer and Weil’s 1992 QJE 2.5 The way forward", " Chapter 2 Motivating &amp; Rationale 2.1 A Case for Reproducibility 2.1.1 How far to go in the quest for reproducibility? 2.2 What is Snakemake &amp; Why Should you use it? 2.3 Why R? 2.4 Working Example: Replicating Mankiw, Romer and Weil’s 1992 QJE Throughout our tutorial we are going to use a running example to illustrate the concepts we discuss. 2.5 The way forward For the purpose of this tutorial we will focus on replicating the following aspects of the MRW paper:1 Regression Tables 1 and 2: Estimating the Textbook- and Augmented Solow Model Figure 1: Unconditional Versus Conditional Convergence To replicate these we will need to proceed as follows: Perform some data management Prepare the data before we run regressions Run regressions for: Different subsets of data Alternative econometric specifications Turn the statistical output of the regressions into a tabular format that we can insert into a document Construct a set of graphs Integrate the tables and graphs into a paper and a set of slides (optional) We hope that these 5 steps look familiar - as they were designed to represent a simplifed workflow for an applied economist or social science researcher. Before proceeding to understanding how to use Snakemake and R to construct a reproducible workflow, the next chapter first takes a deeper dive into the a protypical way to set up a research project on our computer. Exercise: Your own project’s steps Think about a project you are working on or have worked on in the past (it may be a Bachelor or Master’s thesis or a recent / active research project). Does your project fit into the 5 steps we described above? If not, what would you modify or add to our 5 steps? (Do you think this would destroy the general principles we will encourage over the next chapters?) A complete replication using the concepts presented in this tutorial is available here↩ "],
["project-organization.html", "Chapter 3 Project Organization 3.1 Project Structure I: Separating Inputs and Outputs 3.2 Project Structure II: Separating Logical Chunks of the Project 3.3 Project Structure III: Separating Input Parameters from Code", " Chapter 3 Project Organization 3.1 Project Structure I: Separating Inputs and Outputs Structuring our project and the locations of files is an important concept. Let’s look at the structure of our project’s folder. Open a terminal and change into this directory cd YOUR/PATH/TO/snakemake-econ-r-student And list the subdirectories of the main directory ls -d */ We see the following folder structure ./ |- src/ |- out/ |- log/ |- sandbox/ We recommend the following structure for any project: Root Folder src folder for input files out folder for output files a log folder to store computer logs a sandbox folder that gives us a ‘safe place’ to develop new code We discuss each of these in turn. 3.1.1 The Root Folder TBD 3.1.2 The src folder TBD 3.1.3 The out folder TBD 3.1.4 The log folder 3.1.5 Exploring the Full Structure of the MRW Replication Project Now, let’s look at all contents of this main projects directory: ls -F . We see the following folder structure ./ |- src/ |- out/ |- log/ |- sandbox/ | README.md | Snakefile Notice that there are no instances of: (i) scripts, (ii) files containing content of the paper or slides (iii) something else we haven’t thought of yet Instead, there are only two files, a README.md and a file called Snakefile. TODO: explain these two files 3.2 Project Structure II: Separating Logical Chunks of the Project As we have mentioned above, to keep our project’s structure clean, we want to keep all the computer code inside the src directory. Let’s have a look at the content of src. ls -F src/ We see the following output: ./ |src/ |- data/ |- data-management/ |- data-specs/ |- analysis/ |- model-specs/ |- lib/ |- figures/ |- tables/ The type of content we expect in each file is: TBD 3.2.1 Exploring the Structure of the MRW Replication Subdirectories We begin our exploration of the project by looking at the folders that appear to be related to the data. If we look inside the data directory ls -F src/data/ mrw.dta That is, our data/ directory contains the project’s original data set. Note that in more extensive projects, the data/ subfolder would typically have more than one data set. For example: dataset1.dta dataset2.dta dataset3.csv TBD - aside on file endings. Further, your data folder may even contain further subdirectories that organize data further ./ |src/ |- data/ |- data-provider-a/ |- dataset1.csv |- dataset2.csv |- data-provider-b/ |- dataset3.txt |- dataset4.txt If we now turn to the data-management directory, we can explore it’s contents too: ls -F src/data-management/ rename_variables.R gen_reg_vars.R TODO: meaningful filenames Note two different ways to name files Exercise: Exploring the Remaining Subdirectories TBD 3.3 Project Structure III: Separating Input Parameters from Code Next we look at the somewhat mysteriously named data-specs folder. And if we explore the folder’s contents: ls -F src/data-specs/ subset_intermediate.json subset_nonoil.json subset_oecd.json Again, the file names are somewhat meaningful on their own - they appear to be some way of subsetting data (selecting some rows). If we look inside one of these files: cat src/data-specs/subset_oecd.json { &quot;KEEP_CONDITION&quot;: &quot;oecd == 1&quot; } We see an a variable KEEP_CONDITION which is storing a string &quot;oecd == 1&quot;. TBD: Why have we done this? See below. 3.3.1 Exploring Parameter Separation in the MRW Replication Project "],
["initial-steps-with-snakemake.html", "Chapter 4 Initial Steps with Snakemake", " Chapter 4 Initial Steps with Snakemake Content is TBD "],
["automatic-variables.html", "Chapter 5 Automatic Variables", " Chapter 5 Automatic Variables Content is TBD "],
["getting-dependencies-right.html", "Chapter 6 Getting Dependencies Right", " Chapter 6 Getting Dependencies Right Content is TBD "],
["packrat-managing-package-dependencies.html", "Chapter 7 Packrat: Managing Package Dependencies", " Chapter 7 Packrat: Managing Package Dependencies Content is TBD "],
["pattern-rules.html", "Chapter 8 Pattern Rules", " Chapter 8 Pattern Rules Content is TBD "],
["building-the-entire-project.html", "Chapter 9 Building The Entire Project", " Chapter 9 Building The Entire Project Content is TBD "],
["configuration-files-for-tidy-paths.html", "Chapter 10 Configuration Files for Tidy Paths", " Chapter 10 Configuration Files for Tidy Paths Content is TBD "],
["subworkflows-divide-and-conquer.html", "Chapter 11 Subworkflows: Divide and Conquer", " Chapter 11 Subworkflows: Divide and Conquer Content is TBD "],
["building-a-paper-and-slides-with-rmarkdown.html", "Chapter 12 Building a Paper and Slides with Rmarkdown", " Chapter 12 Building a Paper and Slides with Rmarkdown Content is TBD "],
["concluding-thoughts.html", "Chapter 13 Concluding Thoughts", " Chapter 13 Concluding Thoughts Content is TBD "]
]
